<!--pages/chapter one/section1-2/section1-2.wxml-->
<view class="content">
  <text style="font-size: x-large;font-weight: 700;">WebGL绘制一个点</text>
</view>
<view class="p2"> 
  <text style="font-size:small;font-weight: 700;">关键词：</text>
  <text style="line-height: 2;font-style: italic;font-size: x-small;" selectable="{{ false }}" user-select="{{ false }}">
  超文本语言HTML
  脚本语言Javascript
  Canvas画布
  着色器语言GLSL ES
  WebGL API
  </text>
</view>

<view style="margin-bottom: 10px;">
  <text style="font-weight: 700;">WebGL绘制一个点(.html文件完整源码)</text>
</view>

<view class="d1">
  <text>
1    !DOCTYPE html
2    html lang="en"
3    head
4        meta charset="UTF-8"
5        title使用WebGL绘制一个点/title
6    /head
7    body
8    <!--canvas标签创建一个宽高均为500像素，背景为蓝色的矩形画布-->
9    canvas id="webgl" width="500" height="500" style="background-color: blue">/canvas
10   
11   
12   script
13       //通过getElementById()方法获取canvas画布
14       var canvas=document.getElementById('webgl');
15       //通过方法getContext()获取WebGL上下文
16       var gl=canvas.getContext('webgl');
17   
18       //顶点着色器源码
19       var vertexShaderSource = '' +
20           'void main(){' +
21           //给内置变量gl_PointSize赋值像素大小
22           '   gl_PointSize=20.0;' +
23           //顶点位置，位于坐标原点
24           '   gl_Position =vec4(0.0,0.0,0.0,1.0);' +
25           '}';
26   
27       //片元着色器源码
28       var fragShaderSource = '' +
29           'void main(){' +
30           //定义片元颜色
31           '   gl_FragColor = vec4(1.0,0.0,0.0,1.0);' +
32           '}';
33   
34       //初始化着色器
35       var program = initShader(gl,vertexShaderSource,
fragShaderSource);
36       //开始绘制，显示器显示结果
37       gl.drawArrays(gl.POINTS,0,1);
38   
39       //声明初始化着色器函数
40       function initShader(gl,vertexShaderSource,
fragmentShaderSource){
41           //创建顶点着色器对象
42           var vertexShader = gl.createShader(gl.VERTEX_SHADER);
43           //创建片元着色器对象
44           var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
45           //引入顶点、片元着色器源代码
46           gl.shaderSource(vertexShader,vertexShaderSource);
47           gl.shaderSource(fragmentShader,fragmentShader
Source);
48           //编译顶点、片元着色器
49           gl.compileShader(vertexShader);
50           gl.compileShader(fragmentShader);
51   
52           //创建程序对象program
53           var program = gl.createProgram();
54           //附着顶点着色器和片元着色器到program
55           gl.attachShader(program,vertexShader);
56           gl.attachShader(program,fragmentShader);
57           //链接program
58           gl.linkProgram(program);
59           //使用program
60           gl.useProgram(program);
61           //返回程序program对象
62           return program;
63       }
64   /script
65   /body
66   /html
  </text>
</view>

<view style="padding: 40px 10px 10px 10px;">
  <text style="font-weight: 700;">创建Canvas画布</text>
</view>
<view style="margin:0px 20px;">
<text style="font-size: small;margin:30px 20px;line-height: 2;">创建一个Canvas画布，用于显示WebGL的渲染结果，canvas元素和div等元素一样是HTML的一个元素，只是Canvas画布具有2D和3D绘图功能。</text>
</view>
<view style="padding: 40px 10px 10px 10px;">
  <text style="font-weight: 700;margin-bottom: 50px;">Canvas对象方法.getContext()</text>
</view>
<view style="margin:0px 20px;">
<text style="font-size: small;margin:0 20px;line-height: 2;">HTML的Canvas元素提供了2D和3D绘图两种功能，平时程序员之间交流所说的Canvas一词就是指Canvas的2D绘图功能，通过Canvas元素实现的3D绘图功能，也就是所谓的WebGL，或者说WebGL依赖于Canvas元素实现。</text>
<view>
<text style="font-size: small;margin:30px 20px;line-height: 2;">执行canvas.getContext('2d')返回对象具有一系列绘制二维图形的方法，比如绘制直线、圆弧等API。</text></view></view>

<view style="padding: 40px 10px 10px 10px;">
  <text style="font-weight: 700;">WebGL API</text>
</view>
<view style="margin:0px 20px;">
<text style="font-size: small;margin:30px 20px;line-height: 2;">一句话来描述，WebGL API指的就是gl=canvas.getContext('webgl')返回对象gl的一系列绘制渲染方法，通过WebGL API可以把一个三维场景绘制渲染出来。比如上面代码中gl.createShader()、gl.shaderSource()、gl.drawArrays()等方法就是WebGl API。</text>
</view>

<view style="padding: 40px 10px 10px 10px;">
  <text style="font-weight: 700;">着色器语言GLSL ES</text>
</view>
<view style="margin:0px 20px;">
<text style="font-size: small;margin:30px 20px;line-height: 2;">着色器语言用于计算机图形编程，运行在GPU中，平时所说的大多数语言编写的程序都是运行在CPU中。 与OpenGL API相配合的是着色器语言GLSL，与OpenGL ES API、WebGL API相互配合的是着色器语言GLSL ES。OpenGL标准应用的是客户端 OpenGL ES应用的是移动端，WebGL标准应用的是浏览器平台。</text>
</view>

<view style="margin-top: 30px;">
<text text style="line-height: 2;font-style: italic;font-size: x-small;font-weight:700;color: darkcyan;">顶点着色器定义了顶点的渲染位置和点的渲染像素大小</text>
</view>
<view class="d1">
<text>
    //顶点着色器源码
    var vertexShaderSource = '' +
    'void main(){' +
    //给内置变量gl_PointSize赋值像素大小
    '   gl_PointSize=20.0;' +
    //顶点位置，位于坐标原点
    '   gl_Position =vec4(0.0,0.0,0.0,1.0);' +
    '}';
</text>
</view>

<view style="margin-top: 30px;">
<text text style="line-height: 2;font-style: italic;font-size: x-small;font-weight:700;color: darkcyan;">片元着色器定义了点的渲染结果像素的颜色值</text>
</view>
<view class="d1">
<text>
  //片元着色器源码
var fragShaderSource = '' +
    'void main(){' +
    //定义片元颜色
    '   gl_FragColor = vec4(1.0,0.0,0.0,1.0);' +
    '}';
</text>
</view>